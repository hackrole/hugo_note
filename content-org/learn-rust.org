#+HUGO_BASE_DIR: ../
#+HUGO_SECTION: posts
#+HUGO_WEIGHT: auto
#+HUGO_AUTO_SET_LASTMOD: t

* learn rust notebook                                                  :Rust:
  
** TODO 14章命名空间
   :PROPERTIES:
   :EXPORT_FILE_NAME: learn-rust-note-14
   :EXPORT_DATE: 2020-11-01
   :END:
   
   workspace(工作空间)讲多个crates合并到一个项目中,
   
   是否有只能有多个bin-crate和一个lib-crate限制?
   
   #+begin_src toml :output result :export both
     // add/Cargo.toml
     // workspace need a special Cargo.toml which only contains workspace
     [workspace]
     members = [
         "adder"
     ]

     // every project in current workspace need own Cargo.toml
     // projects will share root directory Cargo.lock to make
     // every project have same lib versioin.
     [depencencies]
     add-one = { path: "../add-one"}
   #+end_src
   
   #+begin_src rust :output result :export both
     // add-one/lib.rs
     pub fn add_one(x: i32) -> i32 {
         x + 1
     }

     #[cfg(test)]
     mod tests {
         use super::*;

         #[test]
         fn it_works() {
             assert_eq!(3, add_one(2))
         }
     }
   #+end_src

   #+begin_src rust :output result :export both
     // adder main.rust
     use add_one;

     fn main(){
         let num = 10;
         println!("Hello, world! {} plus one is {}!", num, add_one::add_one(num));
     }
   #+end_src

  使用cargo build -p <project>来build特定项目
  
  发布需要进入每个单独的项目做发布，没有-p/--all参数
  
*** cargo install
    `cargo install` 默认安装到~/.carog/bin目录，只能安装bin-crates.
    
*** cargo submodule
    定义命令名为cargo-<command>的命令可以作为cargo子命令运行
   
** TODO 15 smart-point(智能指针)
   :PROPERTIES:
   :EXPORT_FILE_NAME: learn-rust-note-15-smart-point
   :EXPORT_DATE: 2020-11-01
   :END:
   
*** introduce
    智能指针也是一类指针，但是拥有额外的元数据和功能。
    比如 reference-count(引用计数)只能指针, 允许数据有多个所有者，记录共多少个所有者，在没有所有者时清理数据
    String和Vec<T>也是智能指针，有元数据(容量等)和额外的功能(方法)

    智能指针通常使用struct实现,一般是要实现Deref和Drop trait
    智能指针是Rust常用的通用设计模式，很多库会有自己的智能指针，也可以编写自己的智能指针.
    
    这里主要讨论最常用的智能指针:
    1) Box<T> 用于在堆上分配值
    2) Rc<T> 一个引用计数类型,数据可以有多个所有者
    3) Ref<T>和RefMut<T>, 通过RefCell<T>访问. RefCell<T>是一个在运行时而不是编译时执行的借用规则的类型。
    
    另外需要涉及 **内部可变性** (interior mutability)模式
    已经 **引用循环** (reference cycles), 会泄漏内存，已经如何避免

*** Box<T>使用堆上的数据
    使用场景:
    1) 编译时未知大小的类型，由想要在需要确切大小的上下文中使用这个类型值
    2) 多有大量数据，需要确保在数据不被copy的情况下转移所有权
    3) 当希望一个值只关心他的类型是否实现特定的trait，而不是具体类型

    #+begin_src rust :output result :export both
      fn main() {
          let b = Box::new(5);
          println!("b = {}", b);
      }
    #+end_src
    
    #+begin_src rust
      // use rust to define a recursive Type.
      // Recursive-Type can ref itself, so cannot get it size in build-time.
      enum List {
          Cons(i32, Box<List>),
          Nil
      }

      use crate::List::{Cons, Nil};

      fn main() {
          let list = Cons(1, Box::new(Cons(2, Box::new(Cons(3), Box::new(Nil))));
      }
    #+end_src
    
*** Deref Trait将智能指针当作常规引用处理
    
    DerefMut用于重载可变引用
    
    #+begin_src rust
      use std::ops::Deref;

      struct MyBox<T>(T);

      impl<T> MyBox<T> {
          fn new(x: T) -> MyBox<T> {
              MyBox(x)
          }
      }


      impl<T> Deref for MyBox<T> {
          type Target = T;

          fn deref(&self) -> &T{
              &self.0
          }
      }
    #+end_src
   
*** Drop Trait允许在值离开作用域时执行一些代码
    
    #+begin_src rust
      struct CustomSmartPointer {
          data: String,
      }

      impl Drop for CustomSmartPointer {
          fn drop(&mut self){
              printn!("Dropping customersmartpointr with data `{}`!", self.ata)
          }
      }

      fn main() {
          let c = CustomSmartPointer {data: String::from("my stuff")};
          let d = CustomSmartPointer {data: String::from("other stuff")};
          println!("CustomerSmartPointers created.")
      }
    #+end_src

    rust不允许我们直接调用Drop Trait的drop, 应该使用标准库提供的std::mem::drop
    
    #+begin_src rust
      fn main() {
          let c = CustomSmartPointer {data: String::from("some new")};
          println!("CustomSmartPointer created.");
          // this world raise, cause rust not allow to call DropTrait.drop
          // c.drop();
          // use std::mem:drop is ok, it's in prelude
          drop(c);
          println!("customer droped before the end of main");
      }
    #+end_src
    
*** Rc<T>引用计数智能指针
    Rc<T>只能用于单线程场景

    #+begin_src rust
      /// this world failed
      // enum List {
      //     Cons(i32, Box<List>),
      //     Nil,
      // }

      // use crate::List::{Cons, Nil};

      // fn main() {
      //     let a = Cons(5, Box::new(Cons(10, Box::new(Nil))));
      //     let b = Cons(3, Box::new(a));
      //     let c= Cons(4, Box::new(a));
      // }

      enum List {
          Cons(i32, Rc<List>),
          Nil,
      }

      use crate::List::{Cons, Nil};
      use std::rc::Rc;

      fn main() {
          let a = Rc::new(Cons(5, Rc::new(Cons(10, Rc::new(Nil)))));
          let b = Cons(3, Rc::clone(&a));
          let c = Cons(4, Rc::clone(&a));
      }
    #+end_src

*** RefCell<T>和内部可变性模式
    RefCell<T>不变性作用于运行时, 只能用于单线程场景

    #+begin_src rust
      pub trait Messenger {
          fn send(&self, msg: &str);
      }

      pub struct LimitTracker<'a T: Messager> {
          message: &'a T,
          value: usize,
          max: usize,
      }

      impl<'a, T> LimitTracker<'a, T>
      where T: Messenger {
          pub fn new(messenger: &T, max: usize) -> LimitTracker<T> {
              LimitTracker {
                  messenger,
                  value: 0,
                  max,
              }
          }

          pub fn set_value(&mut self, value: usize) {
              self.value = value;

              let percentage_of_max = self.value as f64 / self.max as f64;

              if percentage_of_max >= 1.0 {
                  self.messenger.send("Error: You are over you quota!");
              } else if percentage_of_max >= 0.9 {
                  self.messenger.send("Urgent warning: You've used up 90% of your quota!");
              } else if percentage_of_max >= 0.75 {
                  self.messenger.send("Warning: You've used up over 75% of your quota!");
              }
          }
      }

      #[cfg(test)]
      mod tests {
          use super::*;

          struct MockMessenger {
              sent_messages: RefCell<Vec<String>>,
          }

          impl MockMessenger {
              fn new() -> MockMessenger{
                  MockMessenger { sent_messages: RefCell::new(vec![]) }
              }
          }
          impl Messenger for MockMessenger {
              fn send(&self, message: &str) {
                  self.sent_messages.borrow_mut().push(String::from(message));
              }

              /// this world panic in runtime
              /// cause RefCell implement Deref Trait, would do ref-check in runtime
              /// every borrow_mut() return a mut ref, every borrow() return a immut ref.
              /// it obey the rust ref-rules in runtime(one mut or multi immut)
              // fn send(&self, message: &str) {
              //     let mut one_borrow = self.sent_messages.borrow_mut();
              //     let mut two_borrow = self.sent_messages.borrow_mut();

              //     one_borrow.push(String::from(message));
              //     two_borrow.push(String::from(message));
              // }
          }

          #[test]
          fn it_send_an_over_75_percente_warning_message() {
              let mock_messenger = MockMessenger::new();
              let mut limit_tracker = LimitTracker::new(&mock_messenger, 100);

              limit_tracker.set_value(80);

              assert_eq!(mock_messenger.sent_messages.borrow().len(), 1);
          }
      }
    #+end_src

    RefCell<T> 通常和Rc<T>一起使用，可以实现multi-mut-ref.

    #+begin_src rust
      #[derive(Debug)]
      enum List {
          Cons(Rc<RefCell<i32>>, Rc<List>),
          Nil,
      }

      use Crate::List::{Cons, Nil};
      use std::rc:Rc;
      use std::cell:RefCell;

      fn main() {
          let value = Rc::new(RefCell::new(5));

          let a = Rc::new(Cons(Rc::clone(&value), Rc::new(Nil)));

          let b = Cons(Rc::new(RefCell::new(6)), Rc::clone(&a));
          let c = Cons(Rc::new(RefCell::new(10)), Rc::clone(&a));

          ,*value.borrow_mut() += 10;

          println!("a after = {:?}", a);
          println!("b after = {:?}", b);
          println!("c after = {:?}", c);
      }
    #+end_src

*** 引用循环和内存泄漏
    
    #+begin_src rust
      /// make a ref-circle, it's possible in rust.
      /// but rust make sure it safe.
      use std::rc::Rc;
      use std::cell::RefCell;
      use crate::List::{Cons, Nil};

      #[derive(Debug)]
      enum List{
          Cons(i32, RefCell<Rc<List>>),
          Nil
      }


      impl List {
          fn tail(&self) -> Option<&RefCell<Rc<List>>> {
              match self {
                  Cons(_, item) => Some(item),
                  Nil => None,
              }
          }
      }

      fn main() {
          let a = Rc::new(Cons(5, RefCell::new(Rc::new(Nil))));

          println!("a initial rc count = {}", Rc::strong_count(&a));
          println!("a next item = {:?}", a.tail());

          let b = Rc::new(Cons(10, RefCell::new(Rc::clone(&a))));

          println!("a rc count after b creation = {}", Rc::strong_count(&a));
          println!("b initial rc count = {}", Rc::strong_count(&b));
          println!("b next item = {:?}", b.tail());

          if let Some(link) = a.tail() {
              ,*link.borrow_mut() = Rc::clone(&b);
          }

          println!("b rc count after changing a = {}", Rc::strong_count(&b));
          println!("a rc count after chaning a = {}", Rc::strong_count(&a));

          /// Uncomment the next line to see that we have a cycle;
          /// it will overflow the stack
          //println!("a next item = {:?}", a.tail());
      }
    #+end_src

    一般可以通过Weak<T>来消除引用循环,
    Weak Ref通过Rc::downgrade创建，之后会增加并记录week_ref的count, 但是在strong_count为0时会清理数据.
    WeakRef通过 `rust`{Weak<T>::upgrade() -> Option<Rc<T>>}

    #+begin_src rust
      use std::rc::{Rc, Weak};
      use std::cell::RefCell;

      #[derive(Debug)]
      struct Node {
          value: i32,
          parent: RefCell<Weak<Node>>,
          children: RefCell<Vec<Rc<Node>>>,
      }

      fn main() {
          let leaf = Rc::new(Node {
              value: 3,
              parent: RefCell::new(Weak:new()),
              children: RefCell::new(vec![]),
          });

          println!("leaf parent = {:?}", leaf.parent.borrow().upgrade());

          let branch = Rc::new(Node {
              value: 5,
              parent: RefCell::new(Weak::new()),
              chidlren: RefCell::new(vec![Rc::clone(&self)]),
          });
          ,*leaf.parent.borrow_mut() = Rc::downgrade(&branch);

          println!("leaf parent = {:?}", leaf.parent.borrow().upgrade());
      }
    #+end_src
    
    visual ~strong_count~ and ~weak_count~
    #+begin_src rust
      fn main() {
          let leat = Rc::new(Node {
              value: 3,
              parent: RefCell::new(Weak::new()),
              children: RefCell::new(vec![]),
          });

          println!("leaf strong = {}, weak = {}", Rc::strong_count(&leaf), Rc::weak_count(&leaf));

          {
              let branch = Rc::new(Node {
                  value: 5,
                  parent: RefCell::new(Weak::new()),
                  children: RefCell::new(vec![Rc::clone(&self)]),
              });

              ,*leaf.parent.borrow_mut() = Rc::downgrade(&branch);

              println!("branch strong = {}, weak = {}", Rc::strong_count(&branch), Rc::weak_count(&branch));
              println!("leaf strong = {}, weak = {}", Rc::strong_count(&leaf), Rc::weak_count(&leaf));
          }
          println!("branch strong = {}, weak = {}", Rc::strong_count(&branch), Rc::weak_count(&branch));
          println!("leaf strong = {}, weak = {}", Rc::strong_count(&leaf), Rc::weak_count(&leaf));
      }
    #+end_src

    
** 无畏并发 fearless concurrency
   concurrent-programming: programs can run in independent with each other.
   parallel programming: program can run at same time.

   as a low-level language, rust need less abstraction and more control.

   
*** use thread
    process vs thread
    
    programs:
    
    1) Race conditions: data-race. resource-race.
    2) DeakLock
    3) difficult concurrent bug.

    os-thread vs green-thread: 1:1 vs M:N
    
    #+begin_src rust
      /// thread examples

      /// when the main-thread exit, the fork-thread will exit too.
      /// just like python thread.deamon flag.

      use std::thread;
      use std::time::Duration;

      fn main() {
          thread::spawn(|| {
              for i in 1..10 {
                  println!("hi number {} from the spawned thread!", i);
                  thread::sleep(Duration::from_millis(1));
              }
          });

          for i in 1..5 {
              println!("hi number {} from the main thread!", i);
              thread::sleep(Duration::from_millis(1));
          }
      }
    #+end_src

    #+begin_src rust
      /// use join to wait sub-thread finish
      use std::thread;
      use std::time::Duration;

      fn main() {
          let handle = thread::spawn(|| {
              for i in 1..10 {
                  println!("hi number {} from the spawned thread!", i);
                  thread::sleep(Duration::from_millis(1));
              };
          });

          for i in 1..5 {
              println!("hi number {} from the main thread!", i);
              thread::sleep(Duration::from_millis(1));
          }

          handle.join().unwrap();
      }
    #+end_src

    thread vs move-closure
    #+begin_src rust
      use std::thread;

      fn main() {
          let v = vec![1, 2, 3];

          /// this would raise, cause the `v` was a borrow-ref.
          /// it may be dropped before sub-thread. rust avoid you to do this.
          // let handle = thread::spawn(|| {
          //     println!("Here's a vector: {:?}", v);
          // });

          /// add `move` to move owner to sub-thread.
          let handle = thread::spawn(move || {
              println!("Here's a vector: {:?}", v);
          });

          /// the would made `v` not exists in sub-thread.
          /// if variables has been moved into sub-thread, this would raise too.
          // drop(v)


          handle.join().unwrap();
      }
    #+end_src

    
*** pass msg between threads

    #+begin_src rust
      use std::thread;
      use std::sync::mpsc;

      fn main() {
          let (tx, rx) = mpsc::channel();

          thread::spawn(move || {
              let val = String::from("HI");
              tx.send(val).unwrap();
          });

          let received = rx.recv().unwrap();
          println!("Got: {}", received);
      }
    #+end_src
    
    #+begin_src rust
      use std::thread;
      use std::sync::mpsc;
      use std::time::Duratin;

      fn single_send() {
          let (tx, rx) = mpsc::channel();

          thread::spawn(move || {
              let vals = vec![
                  String::from("Hi"),
                  String::from("from"),
                  String::from("the"),
                  String::from("thread"),
               ];

              for val in vals {
                  tx.send(val).unwrap();
                  thread::sleep(Duratin::from_secs(1));
              }
          });

          for received in rx {
              println!("Got: {}", received);
          }
      }

      fn multi_send() {
          let (tx, rx) = mpsc::channel();

          // use clone to got multi sender
          let tx1 = mpsc::Sender::clone(&tx);
          thread::spawn(move || {
              let vals = vec![
                  String::from("hi"),
                  String::from("from"),
                  String::from("the"),
                  String::from("thread"),
              ];

              for val in vals {
                  tx1.send(val).unwrap();
                  thread::sleep(Duration::from_secs(1));
              }
          });

          thread::spawn(move || {
              let vals = vec![
                  String::from("move"),
                  String::from("messages"),
                  String::from("for"),
                  String::from("you"),
              ];
              for val in vals {
                  tx.send(val).unwrap();
                  thread::sleep(Duration::from_secs(1));
              }
          });

          for received in rx {
              println!("Got: {}", received);
          }
      }
    #+end_src

    
*** share-memory concurrent
    
