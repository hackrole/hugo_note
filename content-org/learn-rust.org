#+STARTUP: content

#+hugo_base_dir: ../
#+hugo_section: post
#+hugo_weight: auto
#+hugo_auto_set_lastmod: t

* learn rust notebook                                                  :@Rust:

** TODO 14章命名空间
:PROPERTIES:
:EXPORT_FILE_NAME: learn-rust-note-14
:EXPORT_DATE: 2020-11-01
:END:

workspace(工作空间)讲多个crates合并到一个项目中,

是否有只能有多个bin-crate和一个lib-crate限制?

#+begin_src toml :output result :export both
  // add/Cargo.toml
  // workspace need a special Cargo.toml which only contains workspace
  [workspace]
  members = [
      "adder"
  ]

  // every project in current workspace need own Cargo.toml
  // projects will share root directory Cargo.lock to make
  // every project have same lib versioin.
  [depencencies]
  add-one = { path: "../add-one"}
#+end_src

#+begin_src rust :output result :export both
  // add-one/lib.rs
  pub fn add_one(x: i32) -> i32 {
      x + 1
  }

  #[cfg(test)]
  mod tests {
      use super::*;

      #[test]
      fn it_works() {
          assert_eq!(3, add_one(2))
      }
  }
#+end_src

#+begin_src rust :output result :export both
  // adder main.rust
  use add_one;

  fn main(){
      let num = 10;
      println!("Hello, world! {} plus one is {}!", num, add_one::add_one(num));
  }
#+end_src

使用cargo build -p <project>来build特定项目

发布需要进入每个单独的项目做发布，没有-p/--all参数

*** cargo install
`cargo install` 默认安装到~/.carog/bin目录，只能安装bin-crates.

*** cargo submodule
定义命令名为cargo-<command>的命令可以作为cargo子命令运行

** TODO 15 smart-point(智能指针)
:PROPERTIES:
:EXPORT_FILE_NAME: learn-rust-note-15-smart-point
:EXPORT_DATE: 2020-11-01
:END:

*** introduce
智能指针也是一类指针，但是拥有额外的元数据和功能。
比如 reference-count(引用计数)只能指针, 允许数据有多个所有者，记录共多少个所有者，在没有所有者时清理数据
String和Vec<T>也是智能指针，有元数据(容量等)和额外的功能(方法)

智能指针通常使用struct实现,一般是要实现Deref和Drop trait
智能指针是Rust常用的通用设计模式，很多库会有自己的智能指针，也可以编写自己的智能指针.

这里主要讨论最常用的智能指针:
1. Box<T> 用于在堆上分配值
2. Rc<T> 一个引用计数类型,数据可以有多个所有者
3. Ref<T>和RefMut<T>, 通过RefCell<T>访问. RefCell<T>是一个在运行时而不是编译时执行的借用规则的类型。

另外需要涉及 **内部可变性** (interior mutability)模式
已经 **引用循环** (reference cycles), 会泄漏内存，已经如何避免

*** Box<T>使用堆上的数据
使用场景:
1. 编译时未知大小的类型，由想要在需要确切大小的上下文中使用这个类型值
2. 多有大量数据，需要确保在数据不被copy的情况下转移所有权
3. 当希望一个值只关心他的类型是否实现特定的trait，而不是具体类型

#+begin_src rust :output result :export both
  fn main() {
      let b = Box::new(5);
      println!("b = {}", b);
  }
#+end_src

#+begin_src rust
  // use rust to define a recursive Type.
  // Recursive-Type can ref itself, so cannot get it size in build-time.
  enum List {
      Cons(i32, Box<List>),
      Nil
  }

  use crate::List::{Cons, Nil};

  fn main() {
      let list = Cons(1, Box::new(Cons(2, Box::new(Cons(3), Box::new(Nil))));
  }
#+end_src

*** Deref Trait将智能指针当作常规引用处理

#+begin_src rust
  struct MyBox<T>(T);

  impl<T> MyBox<T> {
      fn new(x: T) -> MyBox<T> {
          MyBox(x)
      }
  }
#+end_src

** 16 无畏并发 fearless concurrency
   :PROPERTIES:
   :EXPORT_FILE_NAME: learn-rust-note-16-concurrency
   :EXPORT_DATE: 2020-11-04
   :END:
  
   concurrent-programming: programs can run in independent with each other.
   parallel programming: program can run at same time.

   as a low-level language, rust need less abstraction and more control.
   
*** use thread

    process vs thread

    programs:

    1)  Race conditions: data-race. resource-race.
    2)  DeakLock
    3)  difficult concurrent bug.

    os-thread vs green-thread: 1:1 vs M:N

    #+begin_src rust
    /// thread examples

    /// when the main-thread exit, the fork-thread will exit too.
    /// just like python thread.deamon flag.

    use std::thread;
    use std::time::Duration;

    fn main() {
        thread::spawn(|| {
            for i in 1..10 {
                println!("hi number {} from the spawned thread!", i);
                thread::sleep(Duration::from_millis(1));
            }
        });

        for i in 1..5 {
            println!("hi number {} from the main thread!", i);
            thread::sleep(Duration::from_millis(1));
        }
    }
    #+end_src

    #+begin_src rust
    /// use join to wait sub-thread finish
    use std::thread;
    use std::time::Duration;

    fn main() {
        let handle = thread::spawn(|| {
            for i in 1..10 {
                println!("hi number {} from the spawned thread!", i);
                thread::sleep(Duration::from_millis(1));
            };
        });

        for i in 1..5 {
            println!("hi number {} from the main thread!", i);
            thread::sleep(Duration::from_millis(1));
        }

        handle.join().unwrap();
    }
    ```

    thread vs move-closure

    ```rust
    use std::thread;

    fn main() {
        let v = vec![1, 2, 3];

        /// this would raise, cause the `v` was a borrow-ref.
        /// it may be dropped before sub-thread. rust avoid you to do this.
        // let handle = thread::spawn(|| {
        //     println!("Here's a vector: {:?}", v);
        // });

        /// add `move` to move owner to sub-thread.
        let handle = thread::spawn(move || {
            println!("Here's a vector: {:?}", v);
        });

        /// the would made `v` not exists in sub-thread.
        /// if variables has been moved into sub-thread, this would raise too.
        // drop(v)


        handle.join().unwrap();
    }

    #+end_src


*** pass msg between threads

    #+begin_src rust
    use std::thread;
    use std::sync::mpsc;

    fn main() {
        let (tx, rx) = mpsc::channel();

        thread::spawn(move || {
            let val = String::from("HI");
            tx.send(val).unwrap();
        });

        let received = rx.recv().unwrap();
        println!("Got: {}", received);
    }
    #+end_src

    #+begin_src rust
    use std::thread;
    use std::sync::mpsc;
    use std::time::Duratin;

    fn single_send() {
        let (tx, rx) = mpsc::channel();

        thread::spawn(move || {
            let vals = vec![
                String::from("Hi"),
                String::from("from"),
                String::from("the"),
                String::from("thread"),
            ];

            for val in vals {
                tx.send(val).unwrap();
                thread::sleep(Duratin::from_secs(1));
            }
        });

        for received in rx {
            println!("Got: {}", received);
        }
    }

    fn multi_send() {
        let (tx, rx) = mpsc::channel();

        // use clone to got multi sender
        let tx1 = mpsc::Sender::clone(&tx);
        thread::spawn(move || {
            let vals = vec![
                String::from("hi"),
                String::from("from"),
                String::from("the"),
                String::from("thread"),
            ];

            for val in vals {
                tx1.send(val).unwrap();
                thread::sleep(Duration::from_secs(1));
            }
        });

        thread::spawn(move || {
            let vals = vec![
                String::from("move"),
                String::from("messages"),
                String::from("for"),
                String::from("you"),
            ];
            for val in vals {
                tx.send(val).unwrap();
                thread::sleep(Duration::from_secs(1));
            }
        });

        for received in rx {
            println!("Got: {}", received);
        }
    }

    #+end_src

*** share-memory concurrent

    channel is like single-owner ref.
    share-memory is like multi-owner ref.
    rust type-system and owner-rule can help correctly manage those.

    mutex(互斥器) mutual-exclusion abbs.
    mutex usually stay with data, use the lock to guarding its data.

    correctly use mutex, you need

    1)  request lock before use data.
    2)  after use data, you must release the lock.

    #+begin_src rust
    use std::sync::Mutex;

    fn main() {
        let m = Mutex::new(5);

        {
            let mut num = m.lock().unwrap();
            *num = 6;
        }

        println!("m = {:?}", m);
    }

    #+end_src

    #+begin_src rust
    /// multi-thread mutex example
    // use std::rc:Rc;
    use std::sync::{Mutex, Arc};
    use std::thread;

    fn main() {
        /// this would compile, cause counter with move cannot have multi-owner
        // let counter = Mutex::new(0);
        /// this would compile failed, cause Rc is not thread-safe.
        // let counter = Rc::new(Mutex::new(0));
        /// Arc is thread-safe Ac-Ref
        let counter = Arc::new(Mutex::new(0));
        let mut handles = vec![];

        for _ in 0..10 {
            let counter = Arc::clone(&counter);
            let handlet = thread::spawn(move || {
                let mut num = counter.lock.unwrap();
                *num += 1;
            });
            handles.push(handle);
        }

        for handle in handles {
            handle.join().unwrap();
        }

        println!("Result: {}", *counter.lock().unwrap());
    }

    #+end_src

    Mutex提供了类似Cell<T>的内部可变性，可以修改非mut类型的值.
    Rust不能避免Mutex的所有逻辑错误.

    #+begin_src rust
    /// TODO: add a dead-lock rust Mutex programming.
    #+end_src

    Mutex<T> vs MutexGuard<T>
    
*** 使用Sync and Send trait的可扩展并发

    Rust提供于golang相反的设计，语言本身不提供并发相关内容, 并发功能由库来提供和扩展。
    然后有两个概念内嵌语言中: `std::marker`的 `Sync` 和 `Send` trait.

    marker-trait: 标记类型, 不需要实现trait-method
    implement this need write unsafe-rust-code.

    1)  Send-Trait mark Type can move owner-right between thread.
    2)  Almost all rust Type implement Send-Trait.
    3)  Some speical example like Rc<T> is design for single-thread, Arc<T> is its thread-safe version.
    4)  Any Type which contains only Send-Type auto become Send-Type.
    5)  Sync-Trait mark Type can be used safely in multiple-thread env.
    6)  for Type T, if &T is Send-Trait, T is Sync-Trait.
    7)  Type make of Sync-Type auto become Sync-Type.

** 17 rust OOP
   :PROPERTIES:
   :EXPORT_FILE_NAME: learn-rust-17-rust-oop
   :EXPORT_DATE: 2020-11-04
   :END:
   
   1) rust can bind data with methods
   2) rust can use pub/private to abstract inner implement.
   3) rust not support exntends. you should consider use combination more.

   extend has two more usage-point.
   1) reuse pub method from parent-class or ability to rewrite it on willing. Rust use Trait to do this.
   2) polymorphism. Parent-Ref can ref any-SubType-instances, and method-call is eval at runtime.in Rust, you may use Generics-Type and Trait-Bounds todo this. \`bounded parametric polymorphism\`.

*** TODO Trait-object used for instances with different types
    Generic and Trait-Bound can only replace one type.会在编译时做单态化，所以无法在Vec中存放多种类型.即静态分发(static dispatch)
    在Vec中存放Tracit配置dyn可以(dynamic dispatch)
    
    ~~object-safe-trait~~:
    1) 返回类型不为self
    2) 方法没有任何泛型类型参数

    #+begin_src rust
      pub trait Draw {
          fn draw(&self);
      }

      pub struct Screen {
          /// dyn keyword
          pub components: Vec<Box<dyn Draw>>,
      }

      impl Screen {
          pub fn run(&self) {
              for component in self.components.iter() {
                  component.draw();
              }
          }
      }

      /// Generic with trait-bound can only static-dispatch
      // pub struct Screen<T: Draw> {
      //     pub components: Vec<T>,
      // }

      // impl<T> Screen<T>
      // where T: Draw{
      //     pub fn run(&self) {
      //         for component in self.components.iter() {
      //             component.draw();
      //         }
      //     }
      // }


      /// add Draw-Trait Type
      pub struct Button {
          pub width: u32,
          pub height: u32,
          pub label: String,
      }

      impl Draw for Button {
          fn draw(&self){
              println!("draw button");
          }
      }


      struct SelectBox {
          width: u32,
          height: u32,
          options: Vec<String>,
      }

      impl Draw for SelectBox {
          fn draw(&self) {
              println!("draw selectbox");
          }
      }
    #+end_src
    
*** 面向对象设计模式的实现
    ~~TODO 状态模式~~

    #+begin_src rust
      use blog::Post;

      fn main() {
          let mut post = Post::new();

          post.add_text("I ate a salad for lunch today");
          assert_eq!("", post.content());

          post.request_review();
          assert_eq!("", post.content());

          post.approve();
          assert_eq!("I ate a salad for lunch today", post.content());
      }


      pub struct Post {
          state: Option<Box<dyn State>>,
          content: String,
      }

      impl Post {
          pub fn new() -> Post {
              Post {
                  state: Some(Box::new(Draft {})),
                  content: String::new(),
              }
          }

          pub fn add_text(&mut self, text: &str) {
              self.content.push_str(text);
          }

          pub fn content(&self) -> &str {
              self.state.as_ref().unwrap().content(self)
          }

          pub fn request_review(&mut self){
              if let Some(s) == self.state.take() {
                  self.state = Some(s.request_review())
              }
          }

          pub fn approve(&mut self) {
              if let Some(s) = self.state.take() {
                  self.state = Some(s.approve())
              }
          }
      }


      trait State {
          fn requet_review(self: Box<Self>) -> Box<dyn State>;
          fn approve(self: Box<Self>) -> Box<dyn State>;
          fn content<'a>(&self, post: &'a Post) -> &'a str {
              ""
          }
      }

      struct Draft {}

      impl State for Draft {
          fn request_review(self: Box<Self>) -> Box<dyn State> {
              Box::new(PendingReview {})
          }

          fn approve(self: Box<Self>) -> Box<dyn State> {
              self
          }
      }

      struct PendingReview {}


      impl State for PendingReview {
          fn request_review(self: Box<Self>) -> Box<dyn State> {
              self
          }

          fn approve(self: Box<Self>) -> Box<dyn State>{
              Box::new(Published {})
          }
      }

      struct Published {}

      impl State for Published {
          fn request_review(self: Box<Self>) -> Box<dyn State> {
              self
          }

          fn approve(self: Box<Self>) -> Box<dyn State> {
              self
          }

          fn content<'a>(&self, post: &'a Post) -> &'a str {
              &post.content
          }
      }
    #+end_src

    
** 18 rust pattern
   :PROPERTIES:
   :EXPORT_FILE_NAME: learn-rust-18-match-pattern
   :EXPORT_DATE: 2020-11-08
   :END:
   
   包括的内容:
   1) 字面量 literal
   2) 解构数组，枚举，结构提，元组等
   3) 变量
   4) 通配符
   5) 占位符
  
*** rust match
   rust ~match~ is exhaustive, all situation must be consided

   _ match all, and not bind to variable, use to ignore

   ~if let~ use can only care abouot one situation

   #+begin_src rust
     fn main() {
         let favorite_color: Option<&str> = None;
         let is_tuesday = false;
         let age: Result<u8, _> = "34".parse();

         if let Some(color) = favorite_color {
             println!("Using your favorite color, {}, as the backgourd", favorite_color);
         }else if is_tuesday {
             println!("Tuesday is green day!");
         }else if let Ok(age) = age {
             if age > 30 {
                 println!("Using purple as the background color");
             }else{
                 println!("using orange as the background color");
             }
         }else{
             println!("Using blue as the background color");
         }
     }
   #+end_src
   
   ~while let~ 

   #+begin_src rust
     fn main() {
         let mut stack = Vec::new();
         stack.push(1);
         stack.push(2);
         stack.push(3);

         while let Some(top) = stack.pop() {
             println!("{}", top);
         }
     }
   #+end_src

   ~for~
   #+begin_src rust
     let v = vec!['a', 'b', 'c'];

     for (index, value) in v.iter().enumerate() {
         println!("{} is at index", value, index);
     }
   #+end_src

   ~let~
   #+begin_src rust
     let (x, y, z) = (1, 2, 3);
     /// below will raises
     let (x, y) = (1, 2, 3);
   #+end_src

   *function pattern*
   #+begin_src rust
     fn print_coordinates(&(x, y): &(i32, i32)) {
         println!("Current location: ({}, {})", x, y);
     }

     fn main() {
         let point = (3, 5);
         print_coordinates(&point);
     }
   #+end_src

***  irrefutable vs refutable
   1) function, let, for only accept *irrefutable-pattern*
   2) if let, while let only accept *refutable-pattern*
  
*** match example
    #+begin_src rust
      /// match literal
      let x = 1;

      match x {
          1 => println!("one");
          2 => println!("two");
          _ => println!("anything");
      }

      /// variable, take case the ~variable scope~
      let x = Some(5);
      let y = 10;

      match x {
          Some(50) => println!("Got 50");
          Some(y) => println!("Matched, y = {:?}", y);
          _ => println!("Default case, x = {:?}", x);
      }
      println!("x = {:?}, y = {:?}", x, y);

      /// multi pattern
      let x = 1;
      match x {
          1 | 2 => println!("one or two");
          3 => println!("three");
          _ => println!("anything");
      }

      /// use ~..=~ to match range
      /// *range-match* only accept number or char.
      let x = 5;
      match x {
          1..=5 => println!("one throught five");
          'a'..='j' => println!("a->j");
          _ => println!("something else");
      }
    #+end_src

    _ vs _name vs ..
    1) _ not bind, _name bind (may transfer variable owner)
    2) .. use to match many

   *match guard*
   
   #+begin_src rust
     let num = Some(4);

     match num {
         Some(x) if x < 5 => println!("less than five: {}", x),
         Some(x) => println!("{}", x),
         Noe => (),
     }
   #+end_src
   
  *@ bind*
  #+begin_src rust
    enum Message {
        Hello {id: i32},
    }

    let msg = Message::Hello {id: 5};

    match msg {
        Message::Hello {id: id_variable @ 3..=7} => {
            println!("Found an id in range: {}", id_variable);
        },
        Message::Hello {id: 10..=12} => {
            println!("foun an id in another range");
        },
        Message::Hello {id} => {
            println!("Found some other id: [}", id);
        }
    }
  #+end_src

    
** rust advance feature
   :PROPERTIES:
   :EXPORT_FILE_NAME: learn-rust-19-unsafe-rust
   :EXPORT_DATE: 2020-11-08
   :END:

   1) unsafe-rust
   2) advance-trait
      - trait-ref-type 与trait相关的关联类型
      - default type param 默认参数类型
      - fully qualified syntax 完全限定语法
      - supertraits 超父类
      - newtype模式
   3) advance-type
      - more about new-type pattern
      - type alias 类型别名
      - never type
      - dymatic-size type 动态大小类型
   4) advance function and closure
      - function point 函数指针
      - return closure 返回闭包
   5) macro 宏
      

*** unsafe-rust
    the-addional-super power of unsafe
    1) 解引用裸指针
    2) 调用不安全的函数或方法
    3) 访问或修改可变静态变量
    4) 实现不安全的trait
    5) 访问union字段

   *the /owner-check/ is still on*

**** unref-raw-point
     1) ignore owner-rule, allow mut and immute ref.
     2) not ensure the point valid
     3) allow empty
     4) not implement auto-clean.
       

     #+begin_src rust
       /// create immute and mut raw-point
       /// you can create raw-point in safe-code, but can only deref it in unsafe code.
       let mut num = 5;

       let r1 = &num as *const i32;
       let r2 = &mut num as *mut i32;

       unsafe {
           println!("r1 is: {}", *r1);
           println!("r2 is: {}", *r2);
       }

       /// unsure validate raw-point
       let address = 0x123456usize;
       let r = address as &const i32;
     #+end_src

    
**** call unsafe function or method 
     #+begin_src rust
       unsafe fn dangerous() {}

       unsafe {
           dangerous();
       }

       /// can create safe-abstaction on unsafe-code
       /// rust cannot understand ref twice
       use std::slice;

       fn split_at_mut(slice: &mut [i32], mid: usize) -> (&mut [i32], &mut[i32]) {
           let len = slice.len();
           let ptr = slice.as_mut_ptr();

           assert!(mid <= len);

           unsafe {
               (slice::from_raw_parts_mut(ptr, mid),
                slice::from_raw_parts_mut(ptr.add(mid), len - mid))
           }
       }
     #+end_src
      
**** use ~extern~ to call extern-code
     *foreign function interface, FFI*
     *applicaton binary interface, ABI*
      
     #+begin_src rust
       extern "C" {
           fn abs(input: i32) -> i32;
       }

       /// export extern-function must add ~no_mangle~
       #[no_mangle]
       pub extern "C" fn call_from_c() {
           println!("Just called a rust function from c!", );
       }

       fn main() {
           unsafe {
               println!("Absolute value of -3 according to C: {}", abs(-3));
           }
       }
     #+end_src

**** visit or modify mutable-static variable

     #+begin_src rust
       static mut COUNTER: u32 = 0;

       fn add_to_count(inc: u32) {
           unsafe {
               COUNTER += inc;
           }
       }

       fn main() {
           add_to_count(3);

           unsafe {
               println!("COUNTER: {}", COUNTER);
           }
       }
     #+end_src
      
**** implement unsaf-trait
      
     #+begin_src rust
       unsafe trait Foo {
    
       }


       unsafe impl Foo for i32 {
    
       }
     #+end_src

     
*** advance-trait
    
    ~associated types~

    #+begin_src rust
      pub trait Iterator {
          /// 占位类型
          type Item;

          fn next(&mut self) -> Option<Self::Item>;
      }


      impl Interator for Counter {
          /// unlike generic, this can only choose once.
          type Item = u32;

          fn next(&mut self) -> Option<Self::Item> {
              // -snip-
          }
      }

      /// generic can implement multi-times,
      /// and need add generic-param
      pub trait Iterator<T> {
          fn next(&mut self) -> Option<T>;
      }

      impl Iterator<String> for Counter {
          fn next<String>(&mut self) -> Option<String> {
              // -snip-
          }
      }

      impl Iterator<u32> for Counter {
          fn next<u32>(&mut self) -> Option<u32> {
              // -snip-
          }
      }
    #+end_src

    add default-type for Generic, A good example is Operator-overloading(运算符重载)
    rust not allow create-op or overload-op, but can implement op list in  ~std::ops~.
    
    #+begin_src rust
      use std::ops::Add;

      #[derive(Debug, PartialEq)]
      struct Point {
          x: i32,
          y: i32,
      }

      impl Add for Point {
          type Output = Point;

          fn add(self, other: Point) -> Point {
              Point {
                  x: self.x + other.x,
                  y: self.y + other.y,
              }
          }
      }

      /// Add Trait
      // RHS is default-type-paramters, 默认类型参数
      trait Add<RHS=Self> {
          type Output;

          fn add(self, rhs: RHS) -> Self::Output;
      }


      /// default-type-paramters can
      /// 1) extends type and not broke existing-code
      /// 2) customer in most-people not-need situation
      struct Millimeters(u32);
      struct Meters(u32);

      impl Add(Meters> for Millimeters {
          type Output = Millimeters;

          fn add(self, other: Meters) -> Millimeters {
              Millimeters(self.0 + (other.0 * 1000))
          }
      }
    #+end_src

    完全限定语法与消除歧义: 调用相同名称的方法
    rust neither can avoid traits has same method-name, nor can avoid implement the two traits for same type.
    
    #+begin_src rust
      trait Pilot {
          fn fly(&self);
      }

      trait Wizard {
          fn fly(&self);
      }

      struct Human;

      impl Pilot for Human {
          fn fly(&self){
              println!("This is your captain speaking.");
          }
      }

      impl Wizard for Human {
          fn fly(&self) {
              println!("Up!");
          }
      }

      impl Human {
          fn fly(&self) {
              println!("*waving arms furiously*");
          }
      }


      fn main() {
          let person = Human;
          /// this call method implement for type.
          person.fly();
          /// call method from certain trait
          Pilot::fly(&person);
          Wizard::fly(&person);
      }
    #+end_src
    
    #+begin_src rust
      /// static-method or assoicate-method have no self-paramters.
      /// so cannot use above method to call Trait-method.
      /// you need to use *完全限定语法*
      trait Animal {
          fn baby_name() -> String;
      }

      struct Dog;


      impl Dog {
          fn baby_name() -> String {
              String::from("Spot")
          }
      }

      impl Animal for Dog {
          fn baby_name() -> String {
              String::from("puppy")
          }
      }

      fn main() {
          println!("A baby dog is called a {}", Dog::baby_name());
          // *完全限定语法* syntax <Type as Trait>::function(receiver_if_method, next_arg, ...);
          println!("A baby dog is called a {}", <Dog as Animal>::baby_name());
      }
    #+end_src

   use other-trait functions in current trait. the depends-on trait also need tobe implemented.
   the depends-on trait is supertrait of current-trait.

   #+begin_src rust
     use std::fmt;

     trait OutlinePrint: fmt::Display {
         fn outline_print(&self) {
             let output = self.to_string();
             let len = output.len();
             println!("{}", "*".repeat(len + 4));
             println!("*{}*", " ".repeat(len + 2));
             println!("* {} *", output);
             println!("*{}*", " ".repeat(len + 2));
             println!("{}", "*".repeat(len + 4));
         }
     }


     struct Point {
         x: i32,
         y: i32,
     }

     impl fnt::Display for Point {
         fn fmt(&self, &mut fmt::Formatter) -> fmt::Result {
             write!(f, "({}, {})", self.x, self.y)
         }
     }

     /// this world raise if not implement Debug-Trait
     impl OutlinePrint for Point {}
   #+end_src

   newtype 模式用以在外部类型上实现外部trait, newtype was concept come from haskell. no speed punish in runtime.
   you may need implement every-method in inner-type or implement-Deref trait.
   #+begin_src rust
     use std::fmt;

     struct Wrapper(Vec<String>);

     impl fmt::Display for Wrapper {
         fn fmt(&selff, f: &mut fmt::Formatter) -> fmt::Result {
             write!(f, "[{}]", self.0.join(", "))
         }
     }

     fn main() {
         let w = Wrapper(vec![String::from("hello"), String::from("world")]);
         println!("w = {}", w);
     }
   #+end_src

** advance-type

   1) type-alias
   2) !-type
   3) dynamic-size type

*** use new-type pattern for type-safe and abstraction.

    #+begin_src rust
      /// type-alias was still origin-type.

      type Kilometers = i32;

      let x: i32 = 5;
      let y: Kilometers = 5;

      /// if use new-type, cannot add
      println!("x + y  {}", x + y);


      /// type-alias was most used for less-code
      let f: Box<dyn Fn() + Send + 'static> = Box::new(|| println!("hi"));

      fn takes_long_type(f: Box<dyn Fn() + Send + 'static>) {
          // --snip--
      }

      fn return_long_type() -> Box<dyn Fn() + Send + 'static>{
          // --snip--
      }

      // use alias to reduce code
      type Thunk = Box<dyn Fn() + Send + 'static>;

      let f: Thunk = Box::new(|| println!("hi"));

      fn takes_long_type(f: Thunk) {
          // -snip-
      }

      fn returns_long_type() -> Thunk {
          // -snip-
      }

      /// type-alias usually used with Result<T, E>
      use std::io::Error;
      use std::fmt;

      pub trait Write {
          fn write(&mut self, buf: &[u8]) -> Result<usize, Error>;
          fn flush(&mut self) -> Result<(), Error>;

          fn write_all(&mut self, buf: &[u8]) -> Result<(), Error>;
          fn write_fmt(&mut self, fmt: fmt::Arguments) -> Result<(), Error>;
      }

      // use type-alias with generic
      type Result<T> = std::result::Result<T, std::io::Error>;
      pub strait Write {
          fn write(&mut self, buf: &[u8]) -> Result<usize>;
          fn flush(&mut self) -> Result<()>;

          fn write_all(&mut self, buf: &[u8]) -> Result<()>;
          fn write_fmt(&mut self, fmt: Arguments) -> Result<()>;
      }
    #+end_src

    
*** 从不返回的never-type
    diverging-functions 发散函数
    never-type have no value, can transfer to any-type.
    never-type can use to panic.
    
    #+begin_src rust
      /// continue return !
      let guess = match guess.trim().parse() {
          Ok(_) => 5,
          Err(_) => continue,
          /// the below will raise
          // Err(_) => "hello",
      };

      /// ! used in panic
      impl<T> Option<T> {
          pub fn unwrap(self) -> T {
              match self {
                  Some(val) => val,
                  /// panic return ! value.
                  None => panic!("called optins::unwrap() on a None value"),
              }
          }
      }
    #+end_src
    
*** TODO dynamic-size type and Sized-trait
    
    dynamic-size type must put value in heap and use point.
    
    Size-Trait auto-implement for type
    
    #+begin_src rust
      fn generic<T>(t: T) {
      }

      fn generic<T: Sized>(t: T) {
      }

      // T maybe or maybe not Size-Trait
      fn generic<T: ?Sized>(t: &T) {
      }

    #+end_src

    
** function and closure.
   
    function point
   
    #+begin_src rust
      fn add_one(x: i32) -> i32 {
          x + 1
      }

      fn do_twice(f: fn(i32) -> i32, arg: i32) -> i32 {
          f(arg) + f(arg)
      }

      fn main() {
          let answer = do_twice(add_one, 5);

          println!("the answer is: {}", answer);
      }
    #+end_src

    function point implement all three closure-trait: Fn, FnMut, FnOnce
   
    #+begin_src rust
      let list_of_numbers = vec![1, 2, 3];

      let list_of_strings: Vec<String> = list_of_numbers
          .iter()
          .map(|i| i.to_string())
          .collect();

      let list_of_strings: Vec<String> = list_of_numbers
          .iter()
          .map(ToString::to_string)
          .collect();
    #+end_src
   
    #+begin_src rust
      enum Status {
          Value(u32),
          Stop,
      }

      let list_of_statuses: Vec<Status> =
          (0u32..20)
          .map(Status::value)
          .collect();
    #+end_src

    #+begin_src rust
      /// can return closure directly,
      /// causre Sized-trait cannot known Fn size
      /// below raise.
      // fn return_closure() -> Fn(i32) -> i32 {
    
      // }

      /// use Box to wrap it.
      fn returns_closure() -> Box<dyn Fn(i32) -> i32> {
          Box::new(|x| x + 1)
      }
    #+end_src
  
*** TODO question
    1) function-point vs closure

** macro 宏
   
   1) 声明宏, declarative macro: macro_rules!
   2) 三种过程宏, procedural macro.

  自定义#[derive]宏 在结构体，枚举上指定derive属性添加
  类属性Attribute-like宏可用于任意项的自定义属性
  类函数宏类似函数，不过作用与作为参数传递的token.

  宏是一种为写替他代码而写代码的方式，即元编程, metaprogramming.

  macro vs function
   1) function must declare paramter count and type, macro can aceept different paramters(like js?)
   2) macro is code to generate-code, usually more difficult to understand and write.
   3) macro must be import before call it.

*** 声明宏 declarative-macro, macro_rules!

    #+begin_src rust
      /// implement simple vec! macro
      #[macro_export]
      macro_rules! vec {
          ($( $x:expr), *) => {
              {
                  let mut temp_vec = vec::new();
                  $(
                      temp_vec.push($x);
                  )*
                  temp_vec
              }
          }
      }
    #+end_src
    
*** procedural macros
    自定义派生(derive), 类属性, 类函数
    
    过程宏接受一个TokenStream输入，产生一个TokenStream输出
    
    *Rust has no Reflect反射???*

    #+begin_src rust
      use proc_macro;

      #[some_attribute]
      pub fn some_name(input: TokenStream) -> TokenStream {
    
      }
    #+end_src

    
**** 自定义derive宏
     #+begin_src rust
       /// src/main.rs

       use hello_macro::HelloMacro;
       use hello_macro_derive::HelloMacro;

       #[derive(HelloMacro)]
       struct Pancakes;

       fn main() {
           Pancakes::hello_macro();
       }

       /// ~cargo new hello_macro --lib
       pub trait HelloMacro {
           fn helo_macro();
       }

       /// the Macro implement
       /// cargo new hello_macro_derive --lib
       /// hello_macro_derive/Cargo.toml
       // [lib]
       // proc-macro = true

       // [dependencies]
       // syn = "0.14.4"
       // quote = "0.6.3"

       /// hello_macro_derive/src/lib.rs
       extern crate proc_macro;

       use crate::proc_macro::TokenStream;
       use quote::quote;
       use syn;

       #[proc_macro_derive(HelloMacro)]
       pub fn hello_macro_derive(input: TokenStream) -> TokenStream {
           let ast = syn::parse(input).unwrap();

           impl_hello_macro(&ast);
       }

       fn impl_hello_macro(ast: &syn::DeriveInput) -> TokenStream {
           let name = &ast.ident;
           let gen = quote! {
               impl HelloMacro for #name {
                   fn hello_macro() {
                       println!("Hello, Macro! My name is {} ", stringify!(#name));;
                   }
               }
           }
           gen.into()
       }
     #+end_src
     
**** 类属性宏
     
     #+begin_src rust
       #[route(GET, "/")]
       fn index() {
       }

       /// 工作方式同自定义宏，输入TokenStream, 输出TokenStream
       #[proc_macro_attribute]
       pub fn route(attr: TokenStream, item: TokenStream) -> TokenStream
     #+end_src

**** 类函数宏
     类似函数，比函数更灵活，可以接收未知数量的参数
     
     #+begin_src rust
       let sql = sql!(SELECT * FROM posts WHERE id=1);

       #[proc_macro]
       pub fn sql(input: TokenStream) -> TokenStream {
       }
     #+end_src
     
** 20 build multiple-threading webserver
   :PROPERTIES:
   :EXPORT_FILE_NAME: learn-rust-20-threading-webserver
   :EXPORT_DATE: 2020-11-09
   :END:
   
